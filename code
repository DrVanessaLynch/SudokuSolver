import numpy as np
import time 

# Lets keep track of how fast the sudoku solver is
start = time.time()

# Function to generate possible values of each box: 1 to size of sudoku (dim)
# And put those possible values in each square of the sudoku

def setup(dim):
    valueoptions = list(range(1, dim + 1))
    a = set(valueoptions)  # a now contains a set of values from 1 to dim
    squares = dim * dim
    mtx = np.array(a).repeat(squares).reshape(dim, dim)
    return(mtx);

# Function to input the known grid values
def knownval(mtx):
    counter = int(input("How many initial points are given in the sudoku? "))
    print(counter, " data points will be entered.")
    print("Please enter all data points using x as the vertical axis and y as the horizontal axis") 
    print("beginning at the upper left with coordinates x = 1 and y = 1")
    print("The lower right corner would then be x = ", dim, "and y = ", dim)
    
    r = 1
    for r in range(1, counter + 1):
        xinput = int(input("Enter x value")) - 1    # Enter x and y coordinates, convert to an integer
        yinput = int(input("Enter y value")) - 1
        sqval = int(input("Enter value of square"))
        mtx[xinput,yinput] = {sqval}
        print(xinput, yinput)
        print(mtx)
    return(mtx);  #Finish later

# Input the dimensions of the sudoku and convert it to an integer 
dim = int(input("Enter the value of the exterior dimension of the symmetric sudoku you wish to solve :: "))

# Determine the dimensions of the subquadrants
# For a 4x4 sudoku, the subquadrants would be 2x2
subq = np.sqrt(dim) # Takes a square root
subq = int(subq)    # Converts it to an integer
print("Values of this sudoku range from 1 to ", dim, " with ", subq, " x ", subq, " subquadrants making up the board")

# Total squares on the board
#squares = dim * dim 

# Make a set with all possible values for the squares
#possval = list(range(1, dim + 1))
#values = set(possval)

print("Initializing sudoku board....")
mtx = setup(dim)  # Call the setup function to create our initial matrix with all possible solutions in each square

# Make a copy of the initial mtx for comparison later
mtxcheck = np.copy(mtx)

# Input values given for the sudoku
print("Input starting known values.....")  

#Enter Sudoku Starting Values
mtx = knownval(mtx)

print("The array we will be solving is: ")
print(mtx)

# Initialize counters
i = 0
j = 0
 
# Begin cycle to check progress on solving
# Save a new copy of the matrix (mtxcheck) at the beginning and end of loop
# If differences occur, meaning the values of the matrix changed,
# repeat the loop to see if further solving can be done.

while (np.array_equal(mtx, mtxcheck) == False):
    print("We need to keep working....") 
    mtxcheck = np.copy(mtx)  # Make a new copy of the sudoku matrix

    #Remove duplicate options in rows, columns and subquadrants

    # If the length of the set in each array position is 1, 
    # then remove that element from the remaining sets in 
    # the corresponding section, row, and column.

    for x in range(0, dim):
        for y in range(0, dim):
        
            # If the length of the set in the array position mtx[x,y] is 1,
            # the solution for that position is known.
        
            if len(mtx[x,y])==1: # If a set only has one element
                a = mtx[x,y] # Save point for use later
                print("Working....")
            
                # Determine the subquadrant that the set with a single value (a) is in
                xprime = x // subq
                yprime = y // subq
            
                # Determine the range in x and y of that subquadrant
                # by first finding the min of that range
                xmin = xprime + subq
                xmin = int(xmin)
                ymin = yprime + subq
                ymin = int(ymin)
                
                # Now we find the max of that range
                xmax = xmin + subq
                xmax = int(xmax)
                ymax = ymin + subq
                ymax = int(ymax)
            
                # Now we can remove duplicate elements from the subquadrant
                if i in range(xmin, xmax):
                    if j in range(ymin, ymax):
                        if not i==x and j==y:
                            mtx[i,j] = mtx[i,j] - a
            
                # Now remove duplicates in the corresponding row and column of x,y
            
                for i in range(0, dim):
                    if i!= x:
                        mtx[i,y] = mtx[i,y] - a
                for j in range(0, dim):
                    if j!= y:
                        mtx[x,j] = mtx[x,j] - a            
    continue

while (np.array_equal(mtx, mtxcheck) == True):
    print("We have done all we can do here")
    # Need to check if the sudoku is solved.
    # If yes, exit and print final solution
    # If no, use branching technique to continue solving and return here to check
    break    
    
            
print("******************************")
print("The solution to the puzzle is")
print(mtx) 
print("******************************")

end = time.time()
print("Time to run (in seconds): {}".format(end - start))
